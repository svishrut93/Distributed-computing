Some of these points might change after implementation of Vector Clock code in java : 


Interactions : 

There is a scheduler class which will act like the main class inside the package. 
This class will implement the runnable interface of java. 
The runnable interface is implemented because, instances of this class are intended to be executed by the thread.

This class will read the execution plan for every processor from a file.
Depending on the execution plan provided, Objects of the Processor class will be created and message sent to the concerning processors. 

The complete interactions are better understood by reffering to the class diagram.


2) What we need to store? 

I plan to store an array representing the vector clock for each processor.
The size of the array = number of processors in the execution plan.
More things can be added to this answer, depending upon my execution . 

3) What needs to change ?

Vector clock array contents will be constantly updated depending on the execution plan. The logic for this will be written inside
the VectorClock class using the compareTo() AND update() methods. These will return values back to the method caculateVectorClock in the
processor class. 

5) What will be the output?
Theoretically the output must be the updated vector clock array values, after the execution plan is completed and terminated.






